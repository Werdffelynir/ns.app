#!/usr/local/bin/php
<?php
/**
 * Example: "php sapi command opt1 opt2 opt3 opt4"
 * $argc - 6 (args num)
 * $argv - [sapi, command, op...] array input words
 */


class Sapi {

  private $argv = [];
  private $program = null;

  private $programFile = null;
  private $programName = null;
  private $command = null;
  private $options = [];

  public $config = [
    'version' => '0.0.1',
    'programs_dir' => __DIR__.'/programs/'
  ];

  public function __construct($argv){
    $this->argv = $argv;
    if(array_shift($argv) == 'sapi') {
      $this->programName = trim(array_shift($argv));
      $this->command = trim(array_shift($argv));
      $this->options = $argv;

      $this->callProgram($this->programName);
    }
  }
  
  public function input($sendData, $callback){
    print($sendData);
    $stdin = fopen("php://stdin", "r");
    $response = trim(fgets($stdin));
    fclose($stdin);
    if(is_callable($callback))
      $callback($response);
  }

  public function callProgram($program){
    $this->programFile = $this->config['programs_dir'].$this->programName.'.php';
    if(is_file($this->programFile)){
      require_once ($this->programFile);
      $this->program = new $this->programName($this, $this->command, $this->options);
    }
  }

  public function __get($name){
    switch (trim($name)) {
      case 'name':
        return $this->programName;
        break;
        
      case 'program':
        return $this->program;
        break;
        
      case 'command':
        return $this->command;
        break;
        
      case 'options':
        return $this->options;
        break;
      
      default: break;
    }
  }

  public function confirm($message, $callbackConfirmed, $callbackCanceled){
    $message = $message ? $message : "Confirm Yes/No: ";
    $this->input($message, function($response) use ($message, $callbackConfirmed, $callbackCanceled) {
      switch (strtolower(trim($response))) {
        case 'yes': case 'y': 
          $callbackConfirmed(); 
          break;
        case 'no': case 'n': 
          $callbackCanceled(); 
          break;
        default: 
          print("Try again. "); 
          $this->confirm($message, $callbackConfirmed, $callbackCanceled);
        break;
      }
    });
  }
  
}


$sapi = new Sapi($argv);


?>